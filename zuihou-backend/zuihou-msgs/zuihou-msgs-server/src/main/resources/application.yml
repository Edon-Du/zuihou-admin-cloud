zuihou:
  port:
    nginx: ${NGINX_PORT:80}
    eureka: ${EUREKA_PORT:8761}
  ip:
    mysql: ${MYSQL_IP:${spring.cloud.client.ip-address}}
    nginx: ${NGINX_IP:${spring.cloud.client.ip-address}}
    eureka: ${EUREKA_IP:${spring.cloud.client.ip-address}}
  mysql:
    msgs:
      database: zuihou_msgs_dev
      host: ${zuihou.ip.mysql}
      port: ${zuihou.mysql.port}
    driverClassName: com.mysql.cj.jdbc.Driver
    port: 3306                  # 根据环境更改
    username: root              # 数据库密码
    password: root
  context-path:
    eureka: /zuihou-eureka
    gate: /api
  swagger:
    enabled: true
    docket:
      sms:
        title: 短信模块
        base-package: com.github.zuihou.sms.controller
      msgs:
        title: 消息模块
        base-package: com.github.zuihou.msgs.controller
      mail:
        title: 邮件模块
        base-package: com.github.zuihou.mail.controller
      general:
        title: 通用模块
        base-package: com.github.zuihou.general.controller

logging:
  file: ${logging.path}/root.log
  path: /projects/logs/${spring.application.name}
dozer:
  mappingFiles:
    - classpath:dozer/global.dozer.xml

server:
  servlet:
    context-path:
  port: 8768
  undertow: # jetty  undertow
    io-threads: 8 # 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接, 默认设置每个CPU核心一个线程
    worker-threads: 120  # 阻塞任务线程池, 当执行类似servlet请求阻塞操作, undertow会从这个线程池中取得线程,它的值设置取决于系统的负载
    buffer-size: 2048  # 以下的配置会影响buffer,这些buffer会用于服务器连接的IO操作,有点类似netty的池化内存管理 , 每块buffer的空间大小,越小的空间被利用越充分
    direct-buffers: true  # 是否分配的直接内存

spring:
  main:
    allow-bean-definition-overriding: true
  http:
    encoding:
      charset: UTF-8
      force: true
      enabled: true
  servlet:
    multipart:
      max-file-size: 512MB      # Max file size，默认1M
      max-request-size: 512MB   # Max request size，默认10M
  security:
    user:
      name: zuihou
      password: zuihou
      roles: USER
  datasource:
    druid:
      msgs:
        username: ${zuihou.mysql.username}
        password: ${zuihou.mysql.password}
        driver-class-name: ${zuihou.mysql.driverClassName}
        url: jdbc:mysql://${zuihou.mysql.msgs.host}:${zuihou.mysql.msgs.port}/${zuihou.mysql.msgs.database}?serverTimezone=CTT&characterEncoding=utf8&useUnicode=true&useSSL=false
        initialSize: 10
        minIdle: 50
        maxActive: 200

management:
  endpoints:
    web:
      base-path: /actuator
      exposure:
        include: '*'
  endpoint:
    health:
      show-details: ALWAYS
      enabled: true
eureka:
  instance:
    status-page-url: http://${zuihou.ip.nginx}:${zuihou.port.nginx}/doc.html
    status-page-url-path: ${server.servlet.context-path:}${management.endpoints.web.base-path}/info
    health-check-url-path: ${server.servlet.context-path:}${management.endpoints.web.base-path}/health
    preferIpAddress: true
    ip-address: ${spring.cloud.client.ip-address}
    instance-id: ${spring.cloud.client.ip-address}:${server.port}${server.context-path:}
    ip: ${spring.application.name}
    appname: ${spring.application.name}
    metadata-map:
      user.name: ${spring.security.user.name}
      user.password: ${spring.security.user.password}
      swagger: http://${spring.cloud.client.ip-address}:${server.port}/swagger-resources
      service.name: 消息服务
  client:
    service-url:
      defaultZone: http://${spring.security.user.name}:${spring.security.user.password}@${zuihou.ip.eureka}:${zuihou.port.eureka}${zuihou.context-path.eureka}/eureka/

feign:
  hystrix:
    enabled: true   # feign 熔断机制是否开启
    #支持压缩的mime types
  compression:  # 请求压缩
    request:
      enabled: true
      mime-types: text/xml,application/xml,application/json
      min-request-size: 2048
    response:  # 响应压缩
      enabled: true

ribbon:
  httpclient:
    enabled: false
  okhttp:
    enabled: true
  eureka:
    enabled: true
  ReadTimeout: 30000     #
  ConnectTimeout: 30000  # [ribbon超时时间]大于[熔断超时],那么会先走熔断，相当于你配的ribbon超时就不生效了  ribbon和hystrix是同时生效的，哪个值小哪个生效
  MaxAutoRetries: 0             # 最大自动重试
  MaxAutoRetriesNextServer: 1   # 最大自动像下一个服务重试
  OkToRetryOnAllOperations: false  #无论是请求超时或者socket read timeout都进行重试，

hystrix:
  threadpool:
    default:
      coreSize: 1000 # #并发执行的最大线程数，默认10
      maxQueueSize: 1000 # #BlockingQueue的最大队列数
      queueSizeRejectionThreshold: 500 # #即使maxQueueSize没有达到，达到queueSizeRejectionThreshold该值后，请求也会被拒绝
  command:
    default:
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 120000  # 熔断超时 ribbon和hystrix是同时生效的，哪个值小哪个生效

id-generator:
  machine-code: 1  # id生成器机器掩码

info:
  name: '@project.name@'
  description: '@project.description@'
  version: '@project.version@'
  spring-boot-version: '@spring.boot.version@'
  spring-cloud-version: '@spring.cloud.version@'
