zuihou:
  port:
    jobs: 8767
    nginx: 80
    eureka: 8761
    executor: 8769
  ip:
    jobs: ${JOBS_HOST:127.0.0.1}
    mysql: ${MYSQL_HOST:127.0.0.1}
    nginx: ${NGINX_HOST:127.0.0.1}
    eureka: ${EUREKA_HOST:127.0.0.1}
    executor: ${EXECUTOR_HOST:127.0.0.1}
  context-path:
    eureka: /zuihou-eureka
    gate: /api
  mysql:
    file:
      database: zuihou_file_dev     # 根据环境更改
      host: ${zuihou.ip.mysql}
      port: ${zuihou.mysql.port}
    authority:
      database: zuihou_authority_dev     # 根据环境更改
      host: ${zuihou.ip.mysql}
      port: ${zuihou.mysql.port}
    driverClassName: com.mysql.cj.jdbc.Driver
    port: 3306                  # 根据环境更改
    username: root              # 根据环境更改
    password: root
  file:
    type: LOCAL

### xxl-job email
xxl.job:
  admin:
    addresses: http://${zuihou.ip.jobs}:${zuihou.port.jobs}/zuihou-jobs-server
  executor:
    appname: ${spring.application.name}
    ip: ${zuihou.ip.executor:}
    port: ${zuihou.port.executor:}
    logpath: /projects/logs/${spring.application.name}/jobhandler
    logretentiondays: -1
  accessToken:
  i18n:

logging:
  file: ${logging.path}/root.log
  path: /projects/logs/${spring.application.name}

dozer:
  mappingFiles:
    - classpath:dozer/global.dozer.xml

server:
  servlet:
    context-path: /${spring.application.name}
  port: 8768
  undertow: # jetty  undertow
    io-threads: 4 # 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接, 默认设置每个CPU核心一个线程
    worker-threads: 80  # 阻塞任务线程池, 当执行类似servlet请求阻塞操作, undertow会从这个线程池中取得线程,它的值设置取决于系统的负载
    buffer-size: 1024  # 以下的配置会影响buffer,这些buffer会用于服务器连接的IO操作,有点类似netty的池化内存管理 , 每块buffer的空间大小,越小的空间被利用越充分
    direct-buffers: true  # 是否分配的直接内存

spring:
  main:
    allow-bean-definition-overriding: true
  application:
    name: zuihou-executor-server
  security:
    user:
      name: admin
      password: admin
      roles: USER
  datasource:
    druid:
      authority:
        username: ${zuihou.mysql.username}
        password: ${zuihou.mysql.password}
        driver-class-name: ${zuihou.mysql.driverClassName}
        url: jdbc:mysql://${zuihou.mysql.authority.host}:${zuihou.mysql.authority.port}/${zuihou.mysql.authority.database}?serverTimezone=CTT&characterEncoding=utf8&useUnicode=true&useSSL=false
        initialSize: 10
        minIdle: 50
        maxActive: 200
      file:
        username: ${zuihou.mysql.username}
        password: ${zuihou.mysql.password}
        driver-class-name: ${zuihou.mysql.driverClassName}
        url: jdbc:mysql://${zuihou.mysql.file.host}:${zuihou.mysql.file.port}/${zuihou.mysql.file.database}?serverTimezone=CTT&characterEncoding=utf8&useUnicode=true&useSSL=false
        initialSize: 10
        minIdle: 50
        maxActive: 200

mybatis-plus:
  # 如果是放在src/main/java目录下 classpath:/com/yourpackage/*/mapper/*Mapper.xml
  # 如果是放在resource目录 classpath:/mapper/*Mapper.xml
  mapper-locations:
    - classpath*:mapper_authority/**/*Mapper.xml
    - classpath*:mapper_file/**/*Mapper.xml
  #实体扫描，多个package用逗号或者分号分隔
  typeAliasesPackage: com.github.zuihou.authority.entity,com.github.zuihou.file.entity
  global-config:
    db-config:
      #主键类型  0:"数据库ID自增", 1:"用户输入ID",2:"全局唯一ID (数字类型唯一ID)", 3:"全局唯一ID UUID";
      id-type: INPUT
      #字段策略 0:"忽略判断",1:"非 NULL 判断"),2:"非空判断"
      field-strategy: NOT_EMPTY
      #驼峰下划线转换
      #      db-column-underline: true
      #mp2.3+ 全局表前缀 mp_
      #table-prefix: mp_
      #刷新mapper 调试神器
      #      refresh-mapper: true
      #数据库大写下划线转换
      #capital-mode: true
      #逻辑删除配置（下面3个配置）
      logic-delete-value: 4
      logic-not-delete-value: 0
  configuration:
    #配置返回数据库(column下划线命名&&返回java实体是驼峰命名)，自动匹配无需as（没开启这个，SQL需要写as： select user_id as userId）
    map-underscore-to-camel-case: true
    cache-enabled: false
    #配置JdbcTypeForNull, oracle数据库必须配置
    jdbc-type-for-null: 'null'


management:
  endpoints:
    web:
      base-path: /actuator
      exposure:
        include: '*'
  endpoint:
    health:
      show-details: ALWAYS
      enabled: true

eureka:
  instance:
    status-page-url: http://${zuihou.ip.nginx}:${zuihou.port.nginx}/zuihou-jobs-server
    status-page-url-path: ${server.servlet.context-path:}${spring.mvc.servlet.path:}${management.endpoints.web.base-path:}/info
    health-check-url-path: ${server.servlet.context-path:}${spring.mvc.servlet.path:}${management.endpoints.web.base-path:}/health
    home-page-url-path: ${server.servlet.context-path:}${spring.mvc.servlet.path:}
    preferIpAddress: true
    ip-address: ${spring.cloud.client.ip-address}
    instance-id: ${spring.cloud.client.ip-address}:${server.port}${server.context-path:}
    metadata-map:
      management.context-path: ${server.servlet.context-path:}${spring.mvc.servlet.path:}${management.endpoints.web.base-path:}
      user.name: ${spring.security.user.name}
      user.password: ${spring.security.user.password}
  client:
    service-url:
      defaultZone: http://${spring.security.user.name}:${spring.security.user.password}@${zuihou.ip.eureka}:${zuihou.port.eureka}${zuihou.context-path.eureka}/eureka/


feign:
  hystrix:
    enabled: true   # feign 熔断机制是否开启
    #支持压缩的mime types
  compression:  # 请求压缩
    request:
      enabled: true
      mime-types: text/xml,application/xml,application/json
      min-request-size: 2048
    response:  # 响应压缩
      enabled: true

ribbon:
  httpclient:
    enabled: false
  okhttp:
    enabled: true
  eureka:
    enabled: true
  ReadTimeout: 30000     #
  ConnectTimeout: 30000  # [ribbon超时时间]大于[熔断超时],那么会先走熔断，相当于你配的ribbon超时就不生效了  ribbon和hystrix是同时生效的，哪个值小哪个生效
  MaxAutoRetries: 0             # 最大自动重试
  MaxAutoRetriesNextServer: 1   # 最大自动像下一个服务重试
  OkToRetryOnAllOperations: false  #无论是请求超时或者socket read timeout都进行重试，

hystrix:
  threadpool:
    default:
      coreSize: 1000 # #并发执行的最大线程数，默认10
      maxQueueSize: 1000 # #BlockingQueue的最大队列数
      queueSizeRejectionThreshold: 500 # #即使maxQueueSize没有达到，达到queueSizeRejectionThreshold该值后，请求也会被拒绝
  command:
    default:
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 120000  # 熔断超时 ribbon和hystrix是同时生效的，哪个值小哪个生效

id-generator:
  machine-code: 1  # id生成器机器掩码

info:
  name: "@project.name@"
  description: "@project.description@"
  version: "@project.version@"
  spring-boot-version: "@spring.boot.version@"
  spring-cloud-version: "@spring.cloud.version@"
